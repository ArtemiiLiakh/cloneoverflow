// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model UserCreds {
  id            Bytes         @id @db.ByteA
  email         String        @unique @db.VarChar(200)
  password      String        @db.VarChar(200)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
  user          User?

  @@index([email])
  @@map("users_creds")
}

enum UserStatus {
  USER
  BLOCKED
  ADMIN
}

model User {
  id              Bytes             @id @db.ByteA
  name            String            @db.VarChar(100)
  username        String            @unique
  reputation      Int               @default(0)
  about           String            @db.Text
  status          UserStatus        @default(USER)
  userCreds       UserCreds         @relation(fields: [id], references: [id], onDelete: Cascade)
  questions       Question[]
  answers         Answer[]
  answerUsers     AnswerUser[]
  questionUsers   QuestionUser[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt

  @@index([username])
  @@map("user")
}

model Question {
  id                Int                @id @default(autoincrement())
  ownerId           Bytes?             @db.ByteA @map("owner_id")
  title             String             @db.VarChar(255)
  text              String             @db.Text @default("")
  rate              Int                @default(0)
  views             Int                @default(0)
  isClosed          Boolean            @default(false)
  owner             User?              @relation(fields: [ownerId], references: [id], onDelete: SetNull)
  questionUsers     QuestionUser[]       
  answers           Answer[]
  tags              Tag[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt

  @@map("questions")
}

model Answer {
  id              Int             @id @default(autoincrement())
  questionId      Int             @map("question_id")
  ownerId         Bytes?          @db.ByteA @map("owner_id")
  answerUsers     AnswerUser[]   
  question        Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  owner           User?           @relation(fields: [ownerId], references: [id], onDelete: SetNull)
  text            String          @db.Text
  rate            Int             @default(0)
  isSolution      Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @default(now()) @updatedAt

  @@map("answers")
}

enum UserQuestionStatus {
  VIEWER
  OWNER
  ANSWERER
  VOTER
}

enum VoteType {
  UP
  DOWN
}

model QuestionUser {
  id                Int                   @id @default(autoincrement())
  userId            Bytes                 @db.ByteA @map("user_id") 
  questionId        Int                   @map("question_id")
  user              User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  question          Question              @relation(fields: [questionId], references: [id], onDelete: Cascade)
  status            UserQuestionStatus    @default(OWNER)
  voteType          VoteType?             @map("vote_type")

  @@index([userId])
  @@index([questionId])
  @@map("question_user_stats")
}

enum UserAnswerStatus {
  OWNER
  VOTER
}

model AnswerUser {
  id              Int                   @id @default(autoincrement())
  userId          Bytes                 @db.ByteA @map("user_id")
  answerId        Int                   @map("answer_id")
  user            User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  answer          Answer                @relation(fields: [answerId], references: [id], onDelete: Cascade)
  status          UserAnswerStatus      @default(OWNER)
  voteType        VoteType?               @map("vote_type")

  @@index([userId])
  @@index([answerId])
  @@map("answer_user_stats")
}

model Tag {
  id          Int               @id @default(autoincrement())
  name        String            @unique @db.VarChar(100)
  questions   Question[]

  @@index([name])
  @@map("tags")
}
