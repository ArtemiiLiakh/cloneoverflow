// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model UserCreds {
  id        String   @id @db.Uuid @default(uuid())
  email     String   @unique @db.VarChar(200)
  password  String   @db.VarChar(200)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User?

  @@index([email])
  @@map("users_creds")
}

enum UserStatus {
  USER
  BLOCKED
  ADMIN
  DELETED
}

model User {
  id                    String     @id @db.Uuid
  name                  String     @db.VarChar(100)
  username              String     @unique
  rating                Int        @default(0)
  about                 String     @db.Text
  status                UserStatus @default(USER)
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @default(now()) @updatedAt

  userCreds             UserCreds        @relation(fields: [id], references: [id], onDelete: Cascade)
  questions             Question[]
  answers               Answer[]
  answersVoter          AnswerVoter[]
  questionsViewer       QuestionViewer[]
  questionsVoter        QuestionVoter[]
  favoriteQuestions     FavoriteQuestions[]

  @@index([username])
  @@map("user")
}

model Question {
  id          Int                 @id @default(autoincrement())
  ownerId     String?             @db.Uuid @map("owner_id")
  title       String              @db.VarChar(255)
  text        String              @db.Text @default("")
  rating      Int                 @default(0)
  views       Int                 @default(0)
  isClosed    Boolean             @default(false)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @default(now()) @updatedAt

  owner       User?               @relation(fields: [ownerId], references: [id], onDelete: SetNull)
  viewers     QuestionViewer[]
  voters      QuestionVoter[]
  answers     Answer[]
  tags        Tag[]
  favorites   FavoriteQuestions[]

  @@map("questions")
}

model Answer {
  id         Int      @id @default(autoincrement())
  questionId Int      @map("question_id")
  ownerId    String?  @db.Uuid @map("owner_id")
  text       String   @db.Text
  rating     Int      @default(0)
  isSolution Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  voters   AnswerVoter[]
  question Question      @relation(fields: [questionId], references: [id], onDelete: Cascade)
  owner    User?         @relation(fields: [ownerId], references: [id], onDelete: SetNull)

  @@map("answers")
}

enum VoteType {
  UP
  DOWN
  EMPTY
}

model QuestionViewer {
  id         Int      @id @default(autoincrement())
  userId     String   @db.Uuid @map("user_id")
  questionId Int      @map("question_id")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([questionId])
  @@map("question_viewers")
}

model QuestionVoter {
  id         Int       @id @default(autoincrement())
  userId     String    @db.Uuid @map("user_id")
  questionId Int       @map("question_id")
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  question   Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  voteType   VoteType? @map("vote_type")

  @@index([userId])
  @@index([questionId])
  @@map("question_voters")
}

model AnswerVoter {
  id       Int       @id @default(autoincrement())
  userId   String    @db.Uuid @map("user_id")
  answerId Int       @map("answer_id")
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  answer   Answer    @relation(fields: [answerId], references: [id], onDelete: Cascade)
  voteType VoteType? @map("vote_type")

  @@index([userId])
  @@index([answerId])
  @@map("answer_voters")
}

model Tag {
  id        Int        @id @default(autoincrement())
  name      String     @unique @db.VarChar(100)
  createdAt  DateTime  @default(now())
  questions Question[]

  @@index([name])
  @@map("tags")
}

model FavoriteQuestions {
  userId        String      @db.Uuid @map("user_id")
  questionId    Int         @map("question_id")

  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  question      Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@id([userId, questionId])
  @@map("favorite_questions")
}
