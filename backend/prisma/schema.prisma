// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model UserCreds {
  pk_id         Int           @id @default(autoincrement())
  userId        String        @db.Uuid @unique @default(uuid())
  email         String        @unique @db.VarChar(200)
  password      String        @db.VarChar(200)
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @default(now()) @updatedAt @map("updated_at")
  user          User?

  @@index([userId])
  @@index([email])
  @@map("users_creds")
}

enum UserStatus {
  USER
  BLOCKED
  ADMIN
}

model User {
  pk_id           Int               @id @default(autoincrement())
  userId          String            @db.Uuid @unique @map("user_id")
  name            String            @db.VarChar(100)
  username        String            @unique
  reputation      Int               @default(0)
  about           String            @db.Text
  status          UserStatus        @default(USER)
  userCreds       UserCreds         @relation(fields: [pk_id], references: [pk_id], onDelete: Cascade)
  questions       Question[]
  answers         Answer[]
  answerUsers     AnswerUser[]
  questionUsers   QuestionUser[]
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @default(now()) @updatedAt @map("updated_at")

  @@index([userId])
  @@index([username])
  @@map("user")
}

model Question {
  pk_id             Int                @id @default(autoincrement())
  pk_owner_id       Int    
  questionId        String             @db.Uuid @unique @default(uuid())
  ownerId           String             @db.Uuid
  title             String             @db.VarChar(255)
  text              String             @db.Text @default("")
  rate              Int                @default(0)
  views             Int                @default(0)
  isClosed          Boolean            @default(false)
  owner             User               @relation(fields: [pk_owner_id], references: [pk_id], onDelete: Cascade)
  questionUsers     QuestionUser[]       
  answers           Answer[]
  tags              Tag[]
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @default(now()) @updatedAt @map("updated_at")

  @@index([questionId])
  @@map("questions")
}

model Answer {
  pk_id           Int             @id @default(autoincrement())
  pk_question_id  Int
  pk_owner_id     Int
  answerId        String          @db.Uuid @unique @default(uuid())
  answerUsers     AnswerUser[]   
  questionId      String          @map("question_id")
  question        Question        @relation(fields: [pk_question_id], references: [pk_id], onDelete: Cascade)
  ownerId         String
  owner           User            @relation(fields: [pk_owner_id], references: [pk_id], onDelete: Cascade)
  text            String          @db.Text
  rate            Int             @default(0)
  isSolution      Boolean         @default(false)
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @default(now()) @updatedAt @map("updated_at")

  @@index([answerId])
  @@map("answers")
}

enum UserQuestionStatus {
  VIEWER
  OWNER
  ANSWERER
  VOTER
}

enum VoteType {
  UP
  DOWN
}

model QuestionUser {
  pk_id             Int                   @id @default(autoincrement())
  pk_user_id        Int
  pk_question_id    Int
  questionUserId    String                @unique @map("user_questinos_id") @default(uuid())
  userId            String                @map("user_id")
  questionId        String                @map("question_id")
  user              User                  @relation(fields: [pk_user_id], references: [pk_id], onDelete: Cascade)
  question          Question              @relation(fields: [pk_question_id], references: [pk_id], onDelete: Cascade)
  status            UserQuestionStatus    @default(OWNER)
  voteType          VoteType?             @map("vote_type")

  @@index([userId])
  @@index([questionId])
  @@map("question_user_stats")
}

enum UserAnswerStatus {
  OWNER
  VOTER
}

model AnswerUser {
  pk_id           Int                   @id @default(autoincrement())
  pk_user_id      Int
  pk_answer_id    Int
  answerUserId    String                @db.Uuid @unique @map("user_answers_id") @default(uuid())
  userId          String                @map("user_id")
  answerId        String                @map("answer_id")
  user            User                  @relation(fields: [pk_user_id], references: [pk_id], onDelete: Cascade)
  answer          Answer                @relation(fields: [pk_answer_id], references: [pk_id], onDelete: Cascade)
  status          UserAnswerStatus      @default(OWNER)
  voteType        VoteType?             @map("vote_type")

  @@index([userId])
  @@index([answerId])
  @@map("answer_user_stats")
}

model Tag {
  pk_id       Int               @id @default(autoincrement())
  tagId       String            @db.Uuid @unique @default(uuid())
  name        String            @unique @db.VarChar(100)
  questions   Question[]

  @@index([tagId])
  @@index([name])
  @@map("tags")
}
