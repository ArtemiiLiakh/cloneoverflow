// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model UserCreds {
  id            String        @id @default(uuid())
  email         String        @unique @db.VarChar(200)
  password      String        @db.VarChar(200)
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @default(now()) @updatedAt @map("updated_at")
  user          User?

  @@index([id])
  @@index([email])
  @@map("users_creds")
}

enum UserStatus {
  USER
  BLOCKED
  ADMIN
}

model User {
  userId          String            @id @map("user_id")
  name            String            @db.VarChar(100)
  username        String            @unique
  reputation      Int               @default(0)
  about           String            @db.Text
  status          UserStatus        @default(USER)
  userCreds       UserCreds         @relation(fields: [userId], references: [id], onDelete: Cascade)
  questions       Question[]
  answers         Answer[]
  userAnswers     UserAnswers[]
  userQuestions   UserQuestions[]
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @default(now()) @updatedAt @map("updated_at")

  @@index([userId])
  @@index([username])
  @@map("user")
}

model Question {
  id            String             @id @default(uuid())
  ownerId       String
  title         String             @db.VarChar(255)
  text          String             @db.Text @default("")
  rate          Int                @default(0)
  views         Int                @default(0)
  isClosed      Boolean            @default(false)
  owner         User               @relation(fields: [ownerId], references: [userId], onDelete: Cascade)
  userQuestions UserQuestions[]       
  answers       Answer[]
  tags          Tag[]
  createdAt     DateTime           @default(now()) @map("created_at")
  updatedAt     DateTime           @default(now()) @updatedAt @map("updated_at")

  @@index([id])
  @@map("questions")
}

model Answer {
  id            String        @id @default(uuid())
  userAnswers   UserAnswers[]   
  questionId    String        @map("question_id")
  question      Question      @relation(fields: [questionId], references: [id], onDelete: Cascade)
  ownerId       String
  owner         User   @relation(fields: [ownerId], references: [userId], onDelete: Cascade)
  text          String        @db.Text
  rate          Int           @default(0)
  isSolution    Boolean       @default(false)
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @default(now()) @updatedAt @map("updated_at")

  @@index([id])
  @@map("answers")
}

enum UserQuestionStatus {
  VIEWER
  OWNER
  ANSWERER
  VOTER
}

enum VoteType {
  UP
  DOWN
}

model UserQuestions {
  id            String                @id @default(uuid())
  userId        String                @map("user_id")
  questionId    String                @map("question_id")
  user          User                  @relation(fields: [userId], references: [userId], onDelete: Cascade)
  question      Question              @relation(fields: [questionId], references: [id], onDelete: Cascade)
  status        UserQuestionStatus    @default(OWNER)
  voteType      VoteType?             @map("vote_type")

  @@index([userId])
  @@index([questionId])
  @@map("user_questions")
}

enum UserAnswerStatus {
  OWNER
  VOTER
}

model UserAnswers {
  id            String                @id @default(uuid())
  userId        String                @map("user_id")
  answerId      String                @map("answer_id")
  user          User                  @relation(fields: [userId], references: [userId], onDelete: Cascade)
  answer        Answer                @relation(fields: [answerId], references: [id], onDelete: Cascade)
  status        UserAnswerStatus      @default(OWNER)
  voteType      VoteType?             @map("vote_type")

  @@index([userId])
  @@index([answerId])
  @@map("user_answers")
}

model Tag {
  id          String            @id @default(uuid())
  name        String            @unique @db.VarChar(100)
  questions   Question[]

  @@index([id])
  @@index([name])
  @@map("tags")
}
