name: Backend ci tests

env:
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_DB: postgres
  REDIS_USER: admin
  REDIS_USER_PASSWORD: admin_redis
  SERVER_PORT: 8000
  TOKEN_SECRET: test
  POSTGRES_URL: postgresql://postgres:postgres@localhost:5432/postgres
  REDIS_URL: redis://admin:admin_redis@localhost:6379/0

defaults:
  run:
    working-directory: backend

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
  pull_request: 
    branches:
      - main
      - clean-architecture
    paths:
      - 'backend/**'
      - '.github/workflows/backend-test.yaml'

jobs:
  build: 
    runs-on: ubuntu-20.04
    environment:
      name: test
    strategy:
      matrix:
        node-version: [20.x]
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: Setup common
        run: cd ../common && npm ci && npm run build
      - name: Setup backend
        run: npm ci
      - name: Generate prisma models
        run: npm run db:generate:test
      - name: Run build
        run: npm run build
      - name: Run docker build
        run: docker build --file=Dockerfile ../
  deploy:
    runs-on: ubuntu-20.04
    environment:
      name: test
    strategy:
      matrix:
        node-version: [20.x]
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: Setup common
        run: cd ../common && npm ci && npm run build
      - name: Setup backend
        run: npm ci
      - name: Run docker compose
        run: docker compose -f docker-compose-db.yaml up -d && sleep 5s
      - name: Initialize database
        run: npm run db:sync:test && npm run db:generate:test
      - name: Run backend tests
        run: npm run test && docker compose down